// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: protos/pure_price.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CryptoPriceService_GetCryptoPrice_FullMethodName = "/protos.CryptoPriceService/GetCryptoPrice"
)

// CryptoPriceServiceClient is the client API for CryptoPriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptoPriceServiceClient interface {
	GetCryptoPrice(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error)
}

type cryptoPriceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptoPriceServiceClient(cc grpc.ClientConnInterface) CryptoPriceServiceClient {
	return &cryptoPriceServiceClient{cc}
}

func (c *cryptoPriceServiceClient) GetCryptoPrice(ctx context.Context, in *PriceRequest, opts ...grpc.CallOption) (*PriceResponse, error) {
	out := new(PriceResponse)
	err := c.cc.Invoke(ctx, CryptoPriceService_GetCryptoPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoPriceServiceServer is the server API for CryptoPriceService service.
// All implementations must embed UnimplementedCryptoPriceServiceServer
// for forward compatibility
type CryptoPriceServiceServer interface {
	GetCryptoPrice(context.Context, *PriceRequest) (*PriceResponse, error)
	mustEmbedUnimplementedCryptoPriceServiceServer()
}

// UnimplementedCryptoPriceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCryptoPriceServiceServer struct {
}

func (UnimplementedCryptoPriceServiceServer) GetCryptoPrice(context.Context, *PriceRequest) (*PriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCryptoPrice not implemented")
}
func (UnimplementedCryptoPriceServiceServer) mustEmbedUnimplementedCryptoPriceServiceServer() {}

// UnsafeCryptoPriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptoPriceServiceServer will
// result in compilation errors.
type UnsafeCryptoPriceServiceServer interface {
	mustEmbedUnimplementedCryptoPriceServiceServer()
}

func RegisterCryptoPriceServiceServer(s grpc.ServiceRegistrar, srv CryptoPriceServiceServer) {
	s.RegisterService(&CryptoPriceService_ServiceDesc, srv)
}

func _CryptoPriceService_GetCryptoPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoPriceServiceServer).GetCryptoPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CryptoPriceService_GetCryptoPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoPriceServiceServer).GetCryptoPrice(ctx, req.(*PriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CryptoPriceService_ServiceDesc is the grpc.ServiceDesc for CryptoPriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptoPriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.CryptoPriceService",
	HandlerType: (*CryptoPriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCryptoPrice",
			Handler:    _CryptoPriceService_GetCryptoPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/pure_price.proto",
}
